apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "marduk.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
        {{- include "common.labels" . | indent 4 }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: marduk
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "9001"
        prometheus.io/scrape: "true"
        scheduler.alpha.kubernetes.io/affinity: |
          {
            "nodeAffinity": {
              "requiredDuringSchedulingIgnoredDuringExecution": {
                "nodeSelectorTerms": [
                  { "matchExpressions":
                    [ {"key": "track", "operator": "NotIn", "values": ["build"] } ]
                  }
                ]
              }
            }
          }
      labels:
        {{- include "common.labels" . | indent 8 }}
    spec:
      containers:
        - command:
            - /cloud_sql_proxy
            - -instances={{ .Values.gcpDatabaseInstance}}
            - -credential_file=/etc/marduk-service-account/credentials.json
            - -log_debug_stdout
          image: gcr.io/cloudsql-docker/gce-proxy:1.15
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - sleep 30
          name: cloudsql-proxy
          resources:
            requests:
              cpu: 50m
              memory: 40Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/marduk-service-account
              name:  marduk-service-account
        - env:
            - name: JAVA_OPTIONS
              value: -server -Xms512m -Xmx{{ .Values.resources.xmx }} -Xss256k -XX:MaxGCPauseMillis=5000 -XX:ParallelGCThreads=3
                -Dspring.config.location=/etc/application-config/application.properties
                -Dfile.encoding=UTF-8  {{- if .Values.monitoringEnabled}} -Dcom.sun.management.jmxremote.port=9999  -Dcom.sun.management.jmxremote.rmi.port=9998 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1
            {{- end}}
            - name: TZ
              value: Europe/Oslo
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  key: marduk-db-username
                  name: ror-marduk-secret
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: marduk-db-password
                  name: ror-marduk-secret
            - name: GOOGLE_PUBLISH_SFTP_USERNAME
              valueFrom:
                secretKeyRef:
                  key: marduk-google-sftp-username
                  name: ror-marduk-secret
            - name: GOOGLE_PUBLISH_SFTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: marduk-google-sftp-password
                  name: ror-marduk-secret
            - name: GOOGLE_PUBLISH_QA_SFTP_USERNAME
              valueFrom:
                secretKeyRef:
                  key: marduk-google-qa-sftp-username
                  name: ror-marduk-secret
            - name: GOOGLE_PUBLISH_QA_SFTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: marduk-google-qa-sftp-password
                  name: ror-marduk-secret
            - name: IAM_KEYCLOAK_CLIENT_SECRET
              valueFrom:
                  secretKeyRef:
                    key: marduk-keycloak-secret
                    name: ror-marduk-secret
          image: {{ .Values.image.identifier }}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 9001
              scheme: HTTP
            initialDelaySeconds: 140
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: marduk
          ports:
            - containerPort: {{ .Values.service.http.internalPort }}
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 9001
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: {{ .Values.resources.cpuLimit }}
              memory: {{ .Values.resources.memLimit }}
            requests:
              cpu: {{ .Values.resources.cpuRequest }}
              memory: {{ .Values.resources.memRequest }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/marduk-service-account
              name: marduk-service-account
              readOnly: true
            - mountPath: /etc/secret-volume
              name: secret-volume
              readOnly: true
            - mountPath: /etc/application-config
              name: application-config
              readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: marduk-service-account
          secret:
            defaultMode: 420
            secretName: ror-marduk-sa-key
        - name: secret-volume
          secret:
            defaultMode: 420
            secretName: lamassu-private-key
        - name: application-config
          configMap:
            defaultMode: 420
            name: marduk-config
