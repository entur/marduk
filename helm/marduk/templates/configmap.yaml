apiVersion: v1
data:
  application.properties: |+

    # Spring
    spring.main.sources=no.rutebanken.marduk
    spring.profiles.active=gcs-blobstore
    spring.datasource.url=jdbc:postgresql://localhost:5432/marduk
    spring.datasource.platform=postgresql
    spring.datasource.driver-class-name=org.postgresql.Driver
    spring.datasource.maxActive=10
    server.port={{ .Values.service.http.internalPort }}
    camel.springboot.name=Marduk

    # PubSub
    spring.cloud.gcp.pubsub.project-id={{ .Values.gcp.pubsubProjectId }}
    spring.cloud.gcp.pubsub.credentials.location=file:/etc/marduk-service-account/credentials.json
    spring.cloud.gcp.pubsub.subscriber.parallel-pull-count=1
    spring.cloud.gcp.pubsub.subscriber.executor-threads=30
    spring.cloud.gcp.pubsub.subscriber.max-ack-extension-period=36000
    entur.pubsub.subscriber.autocreate=false

    # Blobstore
    blobstore.gcs.project.id={{ .Values.gcp.blobstoreProjectId }}
    blobstore.gcs.credential.path=/etc/marduk-service-account/credentials.json
    blobstore.gcs.container.name={{ .Values.gcp.bucketName }}
    blobstore.gcs.otpreport.container.name={{ .Values.gcp.otpReportBucketName }}
    blobstore.gcs.exchange.container.name={{ .Values.gcp.exchangeBucketName }}
    blobstore.gcs.graphs.container.name={{ .Values.gcp.otpGraphBucketName }}
    blobstore.delete.external.blobs=false

    # Chouette
    chouette.validate.level1.autoStartup=true
    chouette.validate.level1.cron.schedule={{ .Values.chouette.validateLevel1CronSchedule }}
    chouette.validate.level2.autoStartup=false
    chouette.retry.delay=60000
    chouette.stats.days=180
    chouette.stats.validity.categories=-1;INVALID,0;EXPIRING,120;VALID
    # Refresh the line stats cache. For performance reasons this should not run while the nightly validation is running
    # (see chouette.validate.level1.cron.schedule)
    chouette.stats.cache.refresh.quartz.trigger=cron={{ .Values.chouette.refreshStatsCacheCronSchedule }}&startDelayedSeconds=20&stateful=true
    chouette.url=http://chouette:8080
    chouette.remove.old.jobs.keep.days=30
    chouette.remove.old.jobs.keep.jobs=50
    chouette.export.days.back=365
    chouette.export.days.forward=365
    chouette.max.retries=3000

    # Google GTFS exports
    google.publish.scheduler.autoStartup={{ .Values.google.publish.autoStartup }}
    google.publish.cron.schedule={{ .Values.google.publish.cronSchedule }}
    google.publish.qa.scheduler.autoStartup={{ .Values.google.publishQA.autoStartup }}
    google.publish.qa.cron.schedule={{ .Values.google.publishQA.cronSchedule }}
    google.export.qa.includes.shapes={{ .Values.google.publishQA.includeShapes }}

    # Actuator
    management.server.port=9001
    management.endpoints.enabled-by-default=false
    management.endpoint.info.enabled=true
    management.endpoint.health.enabled=true
    management.endpoint.health.group.readiness.include=readinessState,hazelcast
    management.endpoint.prometheus.enabled=true
    management.endpoints.web.exposure.include=info,health,prometheus

    # Keycloak
    keycloak.auth-server-url={{ .Values.keycloakUrl}}
    keycloak.resource=marduk
    keycloak.realm=rutebanken
    keycloak.bearer-only=true
    keycloak.principal-attribute=preferred_username

    # OAuth2
    marduk.oauth2.resourceserver.keycloak.jwt.issuer-uri={{ .Values.keycloakUrl }}/realms/rutebanken
    marduk.oauth2.resourceserver.keycloak.jwt.jwkset-uri={{ .Values.keycloakUrl }}/realms/rutebanken/protocol/openid-connect/certs
    marduk.oauth2.resourceserver.keycloak.jwt.audience=account
    marduk.oauth2.resourceserver.auth0.jwt.issuer-uri={{ .Values.auth0.url }}/
    marduk.oauth2.resourceserver.auth0.jwt.jwkset-uri={{ .Values.auth0.url }}/.well-known/jwks.json
    marduk.oauth2.resourceserver.auth0.jwt.audience={{ .Values.auth0.audience }}
    marduk.oauth2.resourceserver.auth0.admin.activated={{ .Values.auth0.administratorAccessEnabled }}

    # Other
    providers.api.url=http://baba/services/providers/
    fetch.osm.cron.schedule={{ .Values.osm.fetchCronSchedule }}
    logging.level.no.rutebanken=INFO
    logging.level.org.apache=INFO
    logging.config=classpath:logback.xml
    netex.export.merge.flexible.lines.enabled=true
    otp.graph.build.remote.kubernetes.namespace={{ .Release.Namespace }}
    rutebanken.kubernetes.namespace={{ .Release.Namespace }}
    camel.component.servlet.mapping.context-path=/services/*
    gtfs.export.download.directory=/tmp/marduk/files/gtfs/merged
    netex.export.download.directory=/tmp/marduk/files/netex/merged
    otp2.netex.export.download.directory=/tmp/marduk/files/netex/merged-otp2

    # Temporary setting until bug in KeycloakWebSecurityConfigurerAdapter is fixed (The bean 'httpSessionManager', defined in class path resource [XXXSecurityConfiguration.class], could not be registered. A bean with that name has already been defined in URL)
    spring.main.allow-bean-definition-overriding=true
    # Temporary fix for https://github.com/spring-cloud/spring-cloud-gcp/issues/2315
    spring.cloud.gcp.security.firebase.enabled=false
    # Fix for Hazelcast exception message on shutdown
    entur.hazelcast.shutdownhook.enabled=false
    logging.level.io.fabric8.kubernetes.client.dsl.internal.WatchConnectionManager=DEBUG

kind: ConfigMap
metadata:
  name: {{ template "marduk.name" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels" . | indent 4 }}
