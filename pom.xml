<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<parent>
		<groupId>org.rutebanken.superpom</groupId>
		<artifactId>superpom</artifactId>
		<version>0.0.4</version>
	</parent>

	<modelVersion>4.0.0</modelVersion>

	<groupId>no.rutebanken.marduk</groupId>
	<artifactId>marduk</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<name>marduk</name>
	<description>Backend integration</description>

	<scm>
		<connection>scm:git:ssh://git@github.com:rutebanken/marduk.git</connection>
		<developerConnection>scm:git:ssh://git@github.com:rutebanken/marduk.git</developerConnection>
	</scm>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- versions for use in mvn plugins as we cannot inherit them from a BOM -->
		<fabric8.version>2.2.84</fabric8.version>
		<docker.maven.plugin.version>0.13.9</docker.maven.plugin.version>
		<spring-boot-plugin.version>1.3.6.RELEASE</spring-boot-plugin.version>
		<spring-boot.version>1.3.6.RELEASE</spring-boot.version>
		<jclouds.version>1.9.2</jclouds.version>
		<httpcomponents.version>4.5.1</httpcomponents.version>
		<otp.version>0.20.7-SNAPSHOT</otp.version>
		<assertj-core.version>3.3.0</assertj-core.version>
		<!-- Newest version is 2.17.2, but upgrade breaks http://camel.apache.org/camel-2170-release.html -->
		<camel-version>2.17.2</camel-version>

		<!-- Docker & Fabric8 Configs -->
		<docker.from>dr.rutebanken.org/rutebanken/java-base-image</docker.from>
		<fabric8.dockerUser>rutebanken/</fabric8.dockerUser>
		<docker.image>dr.rutebanken.org/${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>

		<!-- fabric8.env.AB_JOLOKIA_AUTH_OPENSHIFT>true</fabric8.env.AB_JOLOKIA_AUTH_OPENSHIFT -->
		<fabric8.label.component>${project.artifactId}</fabric8.label.component>
		<fabric8.label.container>spring-boot</fabric8.label.container>
		<fabric8.label.group>quickstarts</fabric8.label.group>
		<fabric8.iconRef>camel</fabric8.iconRef>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- Import dependency management from Spring Boot -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-project</artifactId>
				<version>${fabric8.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>com.google.inject</groupId>
				<artifactId>guice</artifactId>
				<version>3.0</version>
			</dependency>

			<dependency>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-netty4-http</artifactId>
				<version>${camel-version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-netty4</artifactId>
				<version>${camel-version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-http-common</artifactId>
				<version>${camel-version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-spring</artifactId>
				<version>${camel-version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-test</artifactId>
				<version>${camel-version}</version>
				<scope>test</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-core</artifactId>
			<version>${camel-version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-http4</artifactId>
			<version>${camel-version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jms</artifactId>
			<version>${camel-version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-spring-boot</artifactId>
			<version>${camel-version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-metrics</artifactId>
			<version>${camel-version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-quartz2</artifactId>
			<version>${camel-version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-ftp</artifactId>
			<version>${camel-version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jclouds</artifactId>
			<version>${camel-version}</version>
			<exclusions>
				<exclusion>
					<groupId>javax.ws.rs</groupId>
					<artifactId>jsr311-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jackson</artifactId>
			<version>${camel-version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-netty4-http</artifactId>
			<version>${camel-version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jsonpath</artifactId>
			<version>${camel-version}</version>
			<exclusions>
				<exclusion>
					<artifactId>json-path</artifactId>
					<groupId>com.jayway.jsonpath</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<artifactId>json-path</artifactId>
			<groupId>com.jayway.jsonpath</groupId>
			<version>2.2.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-swagger-java</artifactId>
			<version>${camel-version}</version>
			<exclusions>
				<exclusion>
					<artifactId>jsr311-api</artifactId>
					<groupId>javax.ws.rs</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-camel</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.jclouds</groupId>
			<artifactId>jclouds-allblobstore</artifactId>
			<version>${jclouds.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jclouds.api</groupId>
			<artifactId>filesystem</artifactId>
			<version>${jclouds.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jclouds.provider</groupId>
			<artifactId>aws-s3</artifactId>
			<version>${jclouds.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
			<version>${httpcomponents.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>${httpcomponents.version}</version>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jersey</artifactId>
		</dependency>
		<!-- http://mvnrepository.com/artifact/org.apache.camel/camel-spring-javaconfig -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-spring-javaconfig</artifactId>
			<version>${camel-version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<!-- Outdated version is needed due to jcloud -->
			<version>17.0</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.2.3.Final</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-compress</artifactId>
			<version>1.10</version>
		</dependency>

		<dependency>
			<groupId>org.opentripplanner</groupId>
			<artifactId>otp</artifactId>
			<version>${otp.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-simple</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>el-api</artifactId>
			<version>6.0.45</version>
		</dependency>

		<dependency>
			<groupId>com.github.junrar</groupId>
			<artifactId>junrar</artifactId>
			<version>0.7</version>
		</dependency>

		<!-- testing -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-test-spring</artifactId>
			<version>${camel-version}</version>
			<scope>test</scope>
		</dependency>



		<!-- <dependency> <groupId>org.jboss.arquillian.junit</groupId> <artifactId>arquillian-junit-container</artifactId> <scope>test</scope>
			</dependency> -->

		<dependency>
			<groupId>io.fabric8</groupId>
			<artifactId>fabric8-arquillian</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.javacrumbs.json-unit</groupId>
			<artifactId>json-unit</artifactId>
			<version>1.8.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>${assertj-core.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockftpserver</groupId>
			<artifactId>MockFtpServer</artifactId>
			<version>2.6</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-maven-plugin</artifactId>
				<version>${fabric8.version}</version>
				<executions>
					<execution>
						<id>json</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>json</goal>
						</goals>
					</execution>
					<execution>
						<id>attach</id>
						<phase>package</phase>
						<goals>
							<goal>attach</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker.maven.plugin.version}</version>
				<configuration>
					<images>
						<image>
							<name>${docker.image}</name>
							<build>
								<from>${docker.from}</from>
								<assembly>
									<basedir>/app</basedir>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<env>
									<JAVA_APP_JAR>${project.build.finalName}.jar</JAVA_APP_JAR>
								</env>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>io.fabric8</groupId>
										<artifactId> fabric8-maven-plugin </artifactId>
										<versionRange> [2.2.84,) </versionRange>
										<goals>
											<goal>json</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- Default sample commands: mvn -Pf8-build ... build Docker images and create OpenShift deployment configs mvn -Pf8-deploy
		... f8-build + push to Docker registry + applying deployment config to OpenShift mvn -Pf8-local-deploy ... deployment for
		a single node setup without pushing to a registry For individual goal usage please consult the fabric8 documentation -->
	<profiles>
		<profile>
			<id>rutebanken</id>
			<properties>
				<fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
				<fabric8.recreate>true</fabric8.recreate>
			</properties>
			<build>
				<!-- Missing fabric8:apply, as this crashed (probably due to missing fabric8) -->
				<defaultGoal>clean install docker:build docker:push fabric8:json</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-build</id>
			<build>
				<defaultGoal>clean install docker:build fabric8:json</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-deploy</id>
			<properties>
				<fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
				<fabric8.recreate>true</fabric8.recreate>
			</properties>
			<build>
				<defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
			</build>
		</profile>
		<profile>
			<id>f8-local-deploy</id>
			<properties>
				<fabric8.recreate>true</fabric8.recreate>
			</properties>
			<build>
				<defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
			</build>
		</profile>
	</profiles>

</project>
