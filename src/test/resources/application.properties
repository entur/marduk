#
# Licensed under the EUPL, Version 1.2 or â€“ as soon they will be approved by
# the European Commission - subsequent versions of the EUPL (the "Licence");
# You may not use this work except in compliance with the Licence.
# You may obtain a copy of the Licence at:
#  
#   https://joinup.ec.europa.eu/software/page/eupl
#  
# Unless required by applicable law or agreed to in writing, software
# distributed under the Licence is distributed on an "AS IS" basis,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the Licence for the specific language governing permissions and
# limitations under the Licence.
#
#

# the options from org.apache.camel.spring.boot.CamelConfigurationProperties can be configured here
camel.springboot.name=Marduk
camel.dataformat.json-jackson.module-refs=jacksonJavaTimeModule

# PubSub settings
# Google Cloud project ID

blobstore.gcs.project.id=test

spring.cloud.gcp.project-id=test
spring.cloud.gcp.pubsub.project-id=test
# Path to credential for accessing the Google Cloud project, using the Spring resource syntax (prefixed with file:)
#spring.cloud.gcp.pubsub.credentials.location=file:/path/to/json/file
# if this property is present then the client library connects to the PubSub emulator instead of Google Cloud
spring.cloud.gcp.pubsub.emulatorHost=localhost:8089
# number of parallel pullers for a given Subscriber. Constrained by the number of threads in the executor.
spring.cloud.gcp.pubsub.subscriber.parallel-pull-count=1
# number of executor threads (shared by all subscribers)
spring.cloud.gcp.pubsub.subscriber.executor-threads=30
# the client library will automatically extend the ack deadline up to this limit.
spring.cloud.gcp.pubsub.subscriber.max-ack-extension-period=36000
# number of threads performing ack deadline extension  (shared by all subscribers). The default value is 5
#entur.pubsub.subscriber.system-threads=5
# path to Google PubSub emulator
# default path if the property is not set (retrieved as a Maven dependency):
#entur.pubsub.emulator.path=target/pubsub-emulator/pubsub-emulator-0.1-SNAPSHOT.jar

# Activating retry logic to accommodate for Google PuSub emulator slow startup in the CI environment
spring.cloud.gcp.pubsub.subscriber.retry.max-attempts=3
spring.cloud.gcp.pubsub.subscriber.retry.initial-retry-delay-second=3
spring.cloud.gcp.pubsub.subscriber.retry.total-timeout-seconds=10
spring.cloud.gcp.pubsub.subscriber.retry.max-rpc-timeout-seconds=3
spring.cloud.gcp.pubsub.subscriber.retry.initial-rpc-timeout-seconds=3

spring.cloud.gcp.pubsub.publisher.retry.max-attempts=3
spring.cloud.gcp.pubsub.publisher.retry.initial-retry-delay-second=3
spring.cloud.gcp.pubsub.publisher.retry.total-timeout-seconds=10
spring.cloud.gcp.pubsub.publisher.retry.initial-rpc-timeout-seconds=3
spring.cloud.gcp.pubsub.publisher.retry.max-rpc-timeout-seconds=3

marduk.camel.redelivery.max=0

blobstore.gcs.exchange.container.name=marduk-exchange
blobstore.gcs.container.name=marduk
blobstore.gcs.otpreport.container.name=otpreport
blobstore.gcs.graphs.container.name=otp-graphs

# for local-disk-blobstore only
blobstore.local.folder=target/blobstore

# chouette import/export settings
# IMPORTANT: This URL is referred to in many of the Chouette example responses - make sure in sync with them or tests will fail
# The standard url notation (http://xxx) no longer works with interceptors in camel 2.22.0, so using http:xxx)
chouette.url=http:chouette:8080
chouette.retry.delay=1
chouette.stats.validity.categories=120,127
chouette.stats.days=180

# Google sftp settings
google.publish.sftp.host=notUsed
google.publish.sftp.username=notUsed
google.publish.sftp.password=notUsed

# otp graph building settings
otp.graph.build.directory=target/local/work
otp.graph.blobstore.subdirectory=graphs

# logging settings
#logging.config=classpath:logback-test.xml
#logging.level.root=DEBUG
#logging.level.no.rutebanken=DEBUG
logging.level.WireMock=WARN
#logging.level.org.springframework.security=DEBUG
spring.profiles.active=in-memory-blobstore,google-pubsub-emulator,test

server.port=28080

providers.api.url=http://localhost/services/providers/

management.endpoints.jmx.exposure.exclude=*

rutebanken.kubernetes.enabled=false

rutebanken.route.singleton.policy.ignore=true

spring.datasource.platform=h2

chouette.stats.cache.refresh.quartz.trigger=cron=0+0+0+1+1+?+2099

netex.export.merge.flexible.lines.enabled=true

# OAuth2 Resource Server for Keycloak
marduk.oauth2.resourceserver.keycloak.jwt.issuer-uri=http://notinuse
marduk.oauth2.resourceserver.keycloak.jwt.jwkset-uri=http://notinuse
marduk.oauth2.resourceserver.keycloak.jwt.audience=notinuse

# OAuth2 Resource Server for Entur Partner tenant
marduk.oauth2.resourceserver.auth0.partner.jwt.issuer-uri=http://notinuse
marduk.oauth2.resourceserver.auth0.partner.jwt.audience=notinuse
marduk.oauth2.resourceserver.auth0.partner.admin.activated=true
marduk.oauth2.resourceserver.auth0.partner.organisations={1:'RB', 2:'RUT', 100: 'ORG_NETEX_BLOCKS_VIEWER'}

# OAuth2 Resource Server for RoR tenant
marduk.oauth2.resourceserver.auth0.ror.jwt.issuer-uri=http://notinuse
marduk.oauth2.resourceserver.auth0.ror.jwt.audience=notinuse
marduk.oauth2.resourceserver.auth0.ror.claim.namespace=notinuse

# OAuth2 Client
spring.security.oauth2.client.registration.marduk.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.marduk.client-id=marduk
spring.security.oauth2.client.registration.marduk.client-secret=notInUse
spring.security.oauth2.client.provider.marduk.token-uri=https://notInUse
marduk.oauth2.client.audience=notInUse


netex.export.block.authorization={ORG_NETEX_BLOCKS_VIEWER:'RUT'}

camel.component.servlet.mapping.context-path=/services/*


