/*
 * Licensed under the EUPL, Version 1.2 or â€“ as soon they will be approved by
 * the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 *
 *   https://joinup.ec.europa.eu/software/page/eupl
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and
 * limitations under the Licence.
 *
 */

package no.rutebanken.marduk.routes.flexlines;

import no.rutebanken.marduk.Constants;
import no.rutebanken.marduk.domain.Provider;
import no.rutebanken.marduk.routes.BaseRouteBuilder;
import no.rutebanken.marduk.routes.status.JobEvent;
import org.apache.camel.LoggingLevel;
import org.springframework.stereotype.Component;

import static no.rutebanken.marduk.Constants.CHOUETTE_REFERENTIAL;
import static no.rutebanken.marduk.Constants.CORRELATION_ID;
import static no.rutebanken.marduk.Constants.DATASET_REFERENTIAL;
import static no.rutebanken.marduk.Constants.FILE_HANDLE;
import static no.rutebanken.marduk.Constants.PROVIDER_ID;
import static no.rutebanken.marduk.Constants.TARGET_CONTAINER;
import static no.rutebanken.marduk.Constants.TARGET_FILE_HANDLE;
import static no.rutebanken.marduk.Constants.VALIDATION_CLIENT_HEADER;
import static no.rutebanken.marduk.Constants.VALIDATION_CLIENT_MARDUK;
import static no.rutebanken.marduk.Constants.VALIDATION_CORRELATION_ID_HEADER;
import static no.rutebanken.marduk.Constants.VALIDATION_DATASET_FILE_HANDLE_HEADER;
import static no.rutebanken.marduk.Constants.VALIDATION_PROFILE_HEADER;
import static no.rutebanken.marduk.Constants.VALIDATION_PROFILE_TIMETABLE_FLEX;
import static no.rutebanken.marduk.Constants.VALIDATION_STAGE_EXPORT_FLEX_POSTVALIDATION;
import static no.rutebanken.marduk.Constants.VALIDATION_STAGE_HEADER;

/**
 * Receive and validate the NeTEx export generated by Uttu before merging it with the NeTEx export generated by chouette.
 * The NeTEx file is successively copied into 3 folders:
 * - the inbound folder where Uttu uploads the NeTEx archive
 * - the validation folder from where Antu can download and validate the file
 * - the outbound folder that contains the validated file to be merged with the chouette export.
 * Since the merging can be triggered both by a chouette export and an Uttu export, it is important to use separate inbound and outbound folders to prevent a non-validated file from being merged.
 */
@Component
public class NetexFlexibleLinesExportRouteBuilder extends BaseRouteBuilder {

    private static final String BLOBSTORE_PATH_UTTU = "uttu";
    public static final String EXPORT_FLEX_FOR_VALIDATION = BLOBSTORE_PATH_UTTU + "/netex/${header." + CHOUETTE_REFERENTIAL + "}" + "/${header." + CORRELATION_ID + "}_${date:now:yyyyMMddHHmmssSSS}-" + Constants.CURRENT_FLEXIBLE_LINES_NETEX_FILENAME;

    @Override
    public void configure() throws Exception {
        super.configure();

        from("google-pubsub:{{marduk.pubsub.project.id}}:FlexibleLinesExportQueue")
                .log(LoggingLevel.INFO, correlation() + "Received notification of new flexible NeTEx dataset")

                .process(e -> {
                    Long providerId =  getProviderRepository().getProviderId(e.getIn().getHeader(CHOUETTE_REFERENTIAL, String.class));
                    Provider provider = getProviderRepository().getProvider(providerId);
                    e.getIn().setHeader(PROVIDER_ID, providerId);
                    e.getIn().setHeader(DATASET_REFERENTIAL, provider.chouetteInfo.referential);
                })

                .process(e -> JobEvent.providerJobBuilder(e)
                        .timetableAction(JobEvent.TimetableAction.EXPORT_NETEX)
                        .state(JobEvent.State.OK)
                        .jobId(null)
                        .build())
                .to("direct:updateStatus")

                .to("direct:copyInboundFileToValidationFolder")
                .to("direct:antuFlexibleNetexPostValidation")
                .routeId("netex-flexible-lines-export-queue");

        // copy the inbound file to a bucket accessible from antu
        from("direct:copyInboundFileToValidationFolder")
                .setHeader(FILE_HANDLE, simple( "inbound/netex/${header." + CHOUETTE_REFERENTIAL + "}-" + Constants.CURRENT_FLEXIBLE_LINES_NETEX_FILENAME))
                .setHeader(TARGET_CONTAINER, simple("${properties:blobstore.gcs.container.name}"))
                .setHeader(TARGET_FILE_HANDLE, simple(EXPORT_FLEX_FOR_VALIDATION))
                .to("direct:copyExchangeBlobToAnotherBucket")
                .routeId("netex-flexible-copy-to-validation-folder");

        // start the validation in antu
        from("direct:antuFlexibleNetexPostValidation")
                .log(LoggingLevel.INFO, correlation() + "Post-validating flexible NeTEx dataset")

                .setHeader(VALIDATION_STAGE_HEADER, constant(VALIDATION_STAGE_EXPORT_FLEX_POSTVALIDATION))
                .setHeader(VALIDATION_CLIENT_HEADER, constant(VALIDATION_CLIENT_MARDUK))
                .setHeader(VALIDATION_PROFILE_HEADER, constant(VALIDATION_PROFILE_TIMETABLE_FLEX))
                .setHeader(VALIDATION_DATASET_FILE_HANDLE_HEADER, header(TARGET_FILE_HANDLE))
                .setHeader(VALIDATION_CORRELATION_ID_HEADER, header(CORRELATION_ID))
                .to("google-pubsub:{{antu.pubsub.project.id}}:AntuNetexValidationQueue")
                .process(e -> JobEvent.providerJobBuilder(e)
                        .timetableAction(JobEvent.TimetableAction.EXPORT_NETEX_POSTVALIDATION)
                        .state(JobEvent.State.PENDING)
                        .jobId(null)
                        .build())
                .to("direct:updateStatus")
                .routeId("antu-flex-netex-post-validation");
    }

}
